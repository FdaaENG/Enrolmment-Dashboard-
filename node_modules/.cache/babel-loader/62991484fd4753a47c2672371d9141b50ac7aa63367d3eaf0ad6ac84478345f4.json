{"ast":null,"code":"var _jsxFileName = \"/Users/fdaaalhalaki/Desktop/Enrolmment-Dashboard-/bilingual-dashboard/src/Components/BarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"../BarChart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart({\n  data,\n  lang,\n  translations\n}) {\n  _s();\n  const universities = [...new Set(data.map(row => row.GEO).filter(Boolean))];\n  const years = [...new Set(data.map(row => row.REF_DATE).filter(Boolean))];\n  const credentials = [...new Set(data.map(row => row[\"Credential type\"]).filter(Boolean))];\n  const statuses = [...new Set(data.map(row => row[\"Status of student in Canada\"]).filter(Boolean))];\n  const [selectedUni, setSelectedUni] = useState(universities[0] || \"\");\n  const [selectedYear, setSelectedYear] = useState(years[0] || \"\");\n  const filtered = data.filter(row => row.GEO === selectedUni && row.REF_DATE === selectedYear && row.VALUE && row[\"Credential type\"] && row[\"Status of student in Canada\"]);\n  const aggregation = {};\n  filtered.forEach(row => {\n    const credential = row[\"Credential type\"];\n    const status = row[\"Status of student in Canada\"];\n    const value = parseInt(row.VALUE) || 0;\n    if (!aggregation[status]) aggregation[status] = {};\n    if (!aggregation[status][credential]) aggregation[status][credential] = 0;\n    aggregation[status][credential] += value;\n  });\n  const colors = [\"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#6366f1\", \"#ec4899\"];\n  const datasets = statuses.map((status, i) => ({\n    label: status,\n    data: credentials.map(c => {\n      var _aggregation$status;\n      return ((_aggregation$status = aggregation[status]) === null || _aggregation$status === void 0 ? void 0 : _aggregation$status[c]) || 0;\n    }),\n    backgroundColor: colors[i % colors.length]\n  }));\n  const chartData = {\n    labels: credentials,\n    datasets: datasets\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: translations.barChart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar-chart-filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: translations.selectUni\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedUni,\n          onChange: e => setSelectedUni(e.target.value),\n          children: universities.map(u => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: u\n          }, u, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 36\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: translations.selectYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedYear,\n          onChange: e => setSelectedYear(e.target.value),\n          children: years.map(y => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: y\n          }, y, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(BarChart, \"T/4wMsQ08wY2nMmOksYQz2iO9DQ=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useState","Bar","jsxDEV","_jsxDEV","BarChart","data","lang","translations","_s","universities","Set","map","row","GEO","filter","Boolean","years","REF_DATE","credentials","statuses","selectedUni","setSelectedUni","selectedYear","setSelectedYear","filtered","VALUE","aggregation","forEach","credential","status","value","parseInt","colors","datasets","i","label","c","_aggregation$status","backgroundColor","length","chartData","labels","className","children","barChart","fileName","_jsxFileName","lineNumber","columnNumber","selectUni","onChange","e","target","u","selectYear","y","_c","$RefreshReg$"],"sources":["/Users/fdaaalhalaki/Desktop/Enrolmment-Dashboard-/bilingual-dashboard/src/Components/BarChart.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"../BarChart.css\";\n\nfunction BarChart({ data, lang, translations }) {\n  const universities = [...new Set(data.map(row => row.GEO).filter(Boolean))];\n  const years = [...new Set(data.map(row => row.REF_DATE).filter(Boolean))];\n  const credentials = [...new Set(data.map(row => row[\"Credential type\"]).filter(Boolean))];\n  const statuses = [...new Set(data.map(row => row[\"Status of student in Canada\"]).filter(Boolean))];\n\n  const [selectedUni, setSelectedUni] = useState(universities[0] || \"\");\n  const [selectedYear, setSelectedYear] = useState(years[0] || \"\");\n\n  const filtered = data.filter(row =>\n    row.GEO === selectedUni &&\n    row.REF_DATE === selectedYear &&\n    row.VALUE &&\n    row[\"Credential type\"] &&\n    row[\"Status of student in Canada\"]\n  );\n\n  const aggregation = {};\n  filtered.forEach(row => {\n    const credential = row[\"Credential type\"];\n    const status = row[\"Status of student in Canada\"];\n    const value = parseInt(row.VALUE) || 0;\n    if (!aggregation[status]) aggregation[status] = {};\n    if (!aggregation[status][credential]) aggregation[status][credential] = 0;\n    aggregation[status][credential] += value;\n  });\n\n  const colors = [\"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#6366f1\", \"#ec4899\"];\n\n  const datasets = statuses.map((status, i) => ({\n    label: status,\n    data: credentials.map(c => aggregation[status]?.[c] || 0),\n    backgroundColor: colors[i % colors.length]\n  }));\n\n  const chartData = {\n    labels: credentials,\n    datasets: datasets\n  };\n\n  return (\n    <div className=\"bar-chart-container\">\n      <h2>{translations.barChart}</h2>\n\n      <div className=\"bar-chart-filters\">\n        <div className=\"dropdown-block\">\n          <label>{translations.selectUni}</label>\n          <select value={selectedUni} onChange={e => setSelectedUni(e.target.value)}>\n            {universities.map(u => <option key={u}>{u}</option>)}\n          </select>\n        </div>\n\n        <div className=\"dropdown-block\">\n          <label>{translations.selectYear}</label>\n          <select value={selectedYear} onChange={e => setSelectedYear(e.target.value)}>\n            {years.map(y => <option key={y}>{y}</option>)}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"chart-wrapper\">\n        <Bar data={chartData} />\n      </div>\n    </div>\n  );\n}\n\nexport default BarChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}