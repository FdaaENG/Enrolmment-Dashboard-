{"ast":null,"code":"var _jsxFileName = \"/Users/fdaaalhalaki/Desktop/Enrolmment-Dashboard-/bilingual-dashboard/src/Components/BarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport \"../BarChart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction BarChart({\n  data,\n  lang,\n  translations\n}) {\n  _s();\n  const universities = [...new Set(data.map(row => row.GEO).filter(Boolean))];\n  const years = [...new Set(data.map(row => row.REF_DATE).filter(Boolean))];\n  const credentials = [...new Set(data.map(row => row[\"Credential type\"]).filter(Boolean))];\n  const fields = [...new Set(data.map(row => row[\"Field of study\"]).filter(Boolean))];\n  const [selectedUni, setSelectedUni] = useState(universities[0] || \"\");\n  const [selectedYear, setSelectedYear] = useState(years[0] || \"\");\n  const filtered = data.filter(row => row.GEO === selectedUni && row.REF_DATE === selectedYear && row.VALUE && row[\"Credential type\"] && row[\"Field of study\"]);\n  const aggregation = {};\n  filtered.forEach(row => {\n    const credential = row[\"Credential type\"];\n    const field = row[\"Field of study\"];\n    const value = parseInt(row.VALUE) || 0;\n    if (!aggregation[credential]) aggregation[credential] = {};\n    if (!aggregation[credential][field]) aggregation[credential][field] = 0;\n    aggregation[credential][field] += value;\n  });\n  const selectedFields = [...new Set(filtered.map(row => row[\"Field of study\"]))];\n  const colors = [\"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#6366f1\", \"#ec4899\", \"#14b8a6\"];\n  const datasets = selectedFields.map((field, i) => ({\n    label: field,\n    data: credentials.map(c => {\n      var _aggregation$c;\n      return ((_aggregation$c = aggregation[c]) === null || _aggregation$c === void 0 ? void 0 : _aggregation$c[field]) || 0;\n    }),\n    backgroundColor: colors[i % colors.length]\n  }));\n  const chartData = {\n    labels: credentials,\n    datasets: datasets\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: false\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: translations.selectStatus || \"Credential Type\"\n        }\n      },\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: translations.barChart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar-chart-filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: translations.selectUni\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedUni,\n          onChange: e => setSelectedUni(e.target.value),\n          children: universities.map(u => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: u\n          }, u, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 36\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: translations.selectYear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedYear,\n          onChange: e => setSelectedYear(e.target.value),\n          children: years.map(y => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: y\n          }, y, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(BarChart, \"T/4wMsQ08wY2nMmOksYQz2iO9DQ=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","BarChart","data","lang","translations","_s","universities","Set","map","row","GEO","filter","Boolean","years","REF_DATE","credentials","fields","selectedUni","setSelectedUni","selectedYear","setSelectedYear","filtered","VALUE","aggregation","forEach","credential","field","value","parseInt","selectedFields","colors","datasets","i","label","c","_aggregation$c","backgroundColor","length","chartData","labels","options","responsive","plugins","legend","position","title","display","scales","x","text","selectStatus","y","beginAtZero","className","children","barChart","fileName","_jsxFileName","lineNumber","columnNumber","selectUni","onChange","e","target","u","selectYear","_c","$RefreshReg$"],"sources":["/Users/fdaaalhalaki/Desktop/Enrolmment-Dashboard-/bilingual-dashboard/src/Components/BarChart.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from \"chart.js\";\nimport \"../BarChart.css\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction BarChart({ data, lang, translations }) {\n  const universities = [...new Set(data.map(row => row.GEO).filter(Boolean))];\n  const years = [...new Set(data.map(row => row.REF_DATE).filter(Boolean))];\n  const credentials = [...new Set(data.map(row => row[\"Credential type\"]).filter(Boolean))];\n  const fields = [...new Set(data.map(row => row[\"Field of study\"]).filter(Boolean))];\n\n  const [selectedUni, setSelectedUni] = useState(universities[0] || \"\");\n  const [selectedYear, setSelectedYear] = useState(years[0] || \"\");\n\n  const filtered = data.filter(row =>\n    row.GEO === selectedUni &&\n    row.REF_DATE === selectedYear &&\n    row.VALUE && row[\"Credential type\"] && row[\"Field of study\"]\n  );\n\n  const aggregation = {};\n  filtered.forEach(row => {\n    const credential = row[\"Credential type\"];\n    const field = row[\"Field of study\"];\n    const value = parseInt(row.VALUE) || 0;\n    if (!aggregation[credential]) aggregation[credential] = {};\n    if (!aggregation[credential][field]) aggregation[credential][field] = 0;\n    aggregation[credential][field] += value;\n  });\n\n  const selectedFields = [...new Set(filtered.map(row => row[\"Field of study\"]))];\n  const colors = [\"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#6366f1\", \"#ec4899\", \"#14b8a6\"];\n\n  const datasets = selectedFields.map((field, i) => ({\n    label: field,\n    data: credentials.map(c => aggregation[c]?.[field] || 0),\n    backgroundColor: colors[i % colors.length]\n  }));\n\n  const chartData = {\n    labels: credentials,\n    datasets: datasets\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: { position: \"top\" },\n      title: { display: false }\n    },\n    scales: {\n      x: { title: { display: true, text: translations.selectStatus || \"Credential Type\" } },\n      y: { beginAtZero: true }\n    }\n  };\n\n  return (\n    <div className=\"bar-chart-container\">\n      <h2>{translations.barChart}</h2>\n\n      <div className=\"bar-chart-filters\">\n        <div className=\"dropdown-block\">\n          <label>{translations.selectUni}</label>\n          <select value={selectedUni} onChange={e => setSelectedUni(e.target.value)}>\n            {universities.map(u => <option key={u}>{u}</option>)}\n          </select>\n        </div>\n\n        <div className=\"dropdown-block\">\n          <label>{translations.selectYear}</label>\n          <select value={selectedYear} onChange={e => setSelectedYear(e.target.value)}>\n            {years.map(y => <option key={y}>{y}</option>)}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"chart-wrapper\">\n        <Bar data={chartData} options={options} />\n      </div>\n    </div>\n  );\n}\n\nexport default BarChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}