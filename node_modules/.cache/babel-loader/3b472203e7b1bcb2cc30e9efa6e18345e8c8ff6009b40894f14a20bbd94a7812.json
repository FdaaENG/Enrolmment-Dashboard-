{"ast":null,"code":"var _jsxFileName = \"/Users/fdaaalhalaki/Desktop/Enrolmment-Dashboard-/bilingual-dashboard/src/Components/DonutChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DonutChart({\n  data\n}) {\n  _s();\n  const monthOptions = [...new Set(data.map(d => d.REF_DATE))];\n  const [selectedMonth, setSelectedMonth] = useState(monthOptions[0]);\n  const filtered = data.filter(d => d.REF_DATE === selectedMonth);\n  const chartData = {\n    labels: filtered.map(d => d[\"Products and product groups\"]),\n    datasets: [{\n      data: filtered.map(d => d.VALUE),\n      backgroundColor: [\"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#6366f1\", \"#ec4899\", \"#14b8a6\", \"#8b5cf6\", \"#f43f5e\", \"#22d3ee\"]\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Month: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedMonth,\n        onChange: e => setSelectedMonth(e.target.value),\n        children: monthOptions.map(m => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: m\n        }, m, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 34\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(DonutChart, \"dUCaweOPVGj2m16pU75z5eAHUUg=\");\n_c = DonutChart;\nexport default DonutChart;\nvar _c;\n$RefreshReg$(_c, \"DonutChart\");","map":{"version":3,"names":["React","useState","Doughnut","jsxDEV","_jsxDEV","DonutChart","data","_s","monthOptions","Set","map","d","REF_DATE","selectedMonth","setSelectedMonth","filtered","filter","chartData","labels","datasets","VALUE","backgroundColor","style","width","children","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","m","_c","$RefreshReg$"],"sources":["/Users/fdaaalhalaki/Desktop/Enrolmment-Dashboard-/bilingual-dashboard/src/Components/DonutChart.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nfunction DonutChart({ data }) {\n  const monthOptions = [...new Set(data.map(d => d.REF_DATE))];\n\n  const [selectedMonth, setSelectedMonth] = useState(monthOptions[0]);\n\n  const filtered = data.filter(d => d.REF_DATE === selectedMonth);\n\n  const chartData = {\n    labels: filtered.map(d => d[\"Products and product groups\"]),\n    datasets: [{\n      data: filtered.map(d => d.VALUE),\n      backgroundColor: [\n        \"#3b82f6\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#6366f1\",\n        \"#ec4899\", \"#14b8a6\", \"#8b5cf6\", \"#f43f5e\", \"#22d3ee\"\n      ]\n    }]\n  };\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div style={{ marginBottom: \"20px\" }}>\n        <label>Month: </label>\n        <select value={selectedMonth} onChange={e => setSelectedMonth(e.target.value)}>\n          {monthOptions.map(m => <option key={m}>{m}</option>)}\n        </select>\n      </div>\n\n      <Doughnut data={chartData} />\n    </div>\n  );\n}\n\nexport default DonutChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,UAAUA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAMC,YAAY,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACH,IAAI,CAACI,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;EAE5D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAACO,YAAY,CAAC,CAAC,CAAC,CAAC;EAEnE,MAAMO,QAAQ,GAAGT,IAAI,CAACU,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKC,aAAa,CAAC;EAE/D,MAAMI,SAAS,GAAG;IAChBC,MAAM,EAAEH,QAAQ,CAACL,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,6BAA6B,CAAC,CAAC;IAC3DQ,QAAQ,EAAE,CAAC;MACTb,IAAI,EAAES,QAAQ,CAACL,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACS,KAAK,CAAC;MAChCC,eAAe,EAAE,CACf,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EACrD,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;IAEzD,CAAC;EACH,CAAC;EAED,oBACEjB,OAAA;IAAKkB,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC5BpB,OAAA;MAAKkB,KAAK,EAAE;QAAEG,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,gBACnCpB,OAAA;QAAAoB,QAAA,EAAO;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtBzB,OAAA;QAAQ0B,KAAK,EAAEjB,aAAc;QAACkB,QAAQ,EAAEC,CAAC,IAAIlB,gBAAgB,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAN,QAAA,EAC3EhB,YAAY,CAACE,GAAG,CAACwB,CAAC,iBAAI9B,OAAA;UAAAoB,QAAA,EAAiBU;QAAC,GAALA,CAAC;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENzB,OAAA,CAACF,QAAQ;MAACI,IAAI,EAAEW;IAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEV;AAACtB,EAAA,CA9BQF,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AAgCnB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}